name: Epitech Actions Workflow

on:
  push:
    branches:
      - main

jobs:
  Compiling:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y make gcc

      - name: Try if can compile or not
        run: |
          make

  Check-Funtions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build project
        run: make
      
      - name: Extract binary name
        run: echo "BINARY_NAME=$(grep '^NAME[[:space:]]*=' Makefile | sed 's/NAME[[:space:]]*=[[:space:]]*//')" >> $GITHUB_ENV

      - name: Check allowed symbols
        run: |
          echo "Checking undefined symbols in binary..."
          symbols=$(nm -u $BINARY_NAME | sed '/U _/d'| grep ' U ' | grep '@' | cut -d'@' -f1 | sort -u)

          echo "Found symbols:"
          echo "$symbols"

          unauthorized=()
          while read -r sym; do
            if ! grep -qx "$sym" ./allowed_functions.txt; then
              unauthorized+=("$sym")
            fi
          done <<< "$symbols"

          if [ "${#unauthorized[@]}" -ne 0 ]; then
            echo "Unauthorized symbols detected:"
            for sym in "${unauthorized[@]}"; do
              echo "  - $sym"
            done
            exit 1
          else
            echo "All undefined symbols are authorized!"
          fi

  Coding-Style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check coding style
        run: "check.sh $PWD $PWD"

      - name: Show coding style errors
        run: |
          if [ -s coding-style-reports.log ]; then
            while IFS=': ' read -r file line severity rule; do
              echo "::error file=${file},line=${line},title=${severity} coding style error::${rule}"
            done < coding-style-reports.log
            exit 1
          fi
  
  Valgrind-Errors:
    runs-on: ubuntu-latest
    needs: Compiling
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y make gcc valgrind

      - name: Extract binary name
        run: echo "BINARY_NAME=$(grep '^NAME[[:space:]]*=' Makefile | sed 's/NAME[[:space:]]*=[[:space:]]*//')" >> $GITHUB_ENV

      - name: Run Valgrind
        run: |
          make
          if [ -f "${{ env.BINARY_NAME }}" ]; then
            valgrind --leak-check=full ./${{ env.BINARY_NAME }} 2>&1 | tee valgrind_output.txt
            if grep -q "ERROR SUMMARY: 0 errors from 0 contexts" valgrind_output.txt; then
            echo "::notice::No memory leaks detected."
              exit 0
            else
              echo "::error::Memory leaks detected or another issue occurred."
              exit 1
            fi
          else
            echo "Error: Binary '${{ env.BINARY_NAME }}' not found!"
            exit 1
          fi

  Unit-Tests-Criterion:
    runs-on: ubuntu-latest
    needs: Compiling
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for tests_run rule
        id: check_tests
        run: |
          if grep -q '^tests_run:' Makefile; then
            echo "tests_run=true" >> $GITHUB_ENV
          else
            echo "tests_run=false" >> $GITHUB_ENV
          fi

      - name: Install essential packages
        if: env.tests_run == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential wget tar

      - name: Cache dependencies
        if: env.tests_run == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.criterion
          key: criterion-${{ runner.os }}-${{ hashFiles('**/dependencies/install_criterion.sh') }}
          restore-keys: |
            criterion-${{ runner.os }}-

      - name: Install criterion for tests
        if: env.tests_run == 'true'
        run: |
          git clone https://github.com/matteoepitech/EpitechActions.git
          cd EpitechActions
          chmod +x ./dependencies/install_criterion.sh
          ./dependencies/install_criterion.sh

      - name: Verify and run tests
        if: env.tests_run == 'true'
        run: make tests_run
